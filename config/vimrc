
if &compatible
  set nocompatible
endif

" The default leader is '\', but many people prefer ',' as it's in a standard
" location.
let mapleader = "\<Space>"
let maplocalleader = ","
let g:denite_leader = "f"

" Set main configuration directory, and where cache is stored.
let $VIMPATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim')
let g:dein#install_max_processes = 16
let g:dein#install_progress_type = 'echo'
let g:dein#enable_notification = 0
let g:dein#install_log_filename = $VARPATH.'/dein.log'
let hook_immediate = []
let plugs = []

function! LoadYaml(filename) abort " {
python3 << endpython
import vim, yaml
with open(vim.eval('a:filename'), 'r') as f:
    vim.vars['yaml_file'] = yaml.load(f.read())
endpython
  return g:yaml_file
endfunction " }

function! s:dein_load_yaml(plug) abort " {
  let a:events = ['add', 'source', 'always']
  for plugin in g:plug
    let s:plug_name = split(plugin['repo'], "/")[-1]

    for s:event in a:events
      let s:plug_name_event = expand('$PLUGINPATH/').s:plug_name.'.'.s:event.'.vim'
      if filereadable(s:plug_name_event)
        let plugin['hook_'.s:event] = 'source '.s:plug_name_event
      endif
    endfor
    call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
  endfor
endfunction " }

function! s:source_file(path, ...) abort "{
  let use_global = get(a:000, 0, ! has('vim_starting'))
  let abspath = resolve(expand($VIMPATH.'/config/'.a:path))
  if ! use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  let content = map(readfile(abspath),
        \ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute printf('source %s', fnameescape(tempfile))
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction " }

augroup MyAutoCmd " { Set augroup
  autocmd!
  autocmd CursorHold *? syntax sync minlines=300
augroup END " }

if has('vim_starting') " { Initialize base requirements
  call s:source_file('init.vim')
  if has('nvim')
    call s:source_file('neovim.vim')
  endif
endif " }

" Initialize dein.vim (package manager) {
let s:dein_path = expand('$VARPATH/dein')
let $PLUGINPATH = expand('$VIMPATH/config/plugins')

silent exec '!cat $(find '.expand('$PLUGINPATH').' -type f -iname "*.yaml") > '.expand('$VARPATH/plugins.yaml')
let s:autoplugs = [expand('$VARPATH/plugins.yaml')]

for autoplug in s:autoplugs
  try
    call add(g:plugs, LoadYaml(autoplug))
  catch /.*/
    echomsg v:exception
    echomsg 'Error loading '.autoplug.' ...'
    echomsg 'Caught: ' v:exception
  endtry
endfor

for plug in g:plugs
  for plugin in plug
    if has_key(plugin, 'hook_always')
      execute plugin['hook_always']
    endif
  endfor
endfor

if dein#load_state(s:dein_path)

  call dein#begin(s:dein_path, s:autoplugs + [expand('<sfile>')])
  call dein#add('Shougo/dein.vim')

  for plug in g:plugs
    call s:dein_load_yaml(plug)
  endfor

  if isdirectory(expand('$VIMPATH/dev'))
    call dein#local(expand('$VIMPATH/dev'), {'frozen': 1, 'merged': 0})
  endif
  call dein#end()
  call dein#save_state()
endif
if dein#check_install()
  if ! has('nvim')
    set nomore
  endif
  call dein#install()
endif

filetype plugin indent on
syntax enable

call dein#call_hook('source')
call dein#call_hook('post_source')
call dein#remote_plugins()
unlet g:plugs
" }

" Loading configuration modules {
call s:source_file('theme.vim')
call s:source_file('general.vim')
call s:source_file('terminal.vim')
call s:source_file('filetype.vim')
call s:source_file('mappings.vim')
set secure
" }
