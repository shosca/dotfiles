
if &compatible
  set nocompatible
endif

" The default leader is '\', but many people prefer ',' as it's in a standard
" location.
let mapleader = "\<Space>"
let maplocalleader = ","
let g:denite_leader = "f"

" Set main configuration directory, and where cache is stored.
let $VIMPATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim')

" Constants
let s:is_sudo = $SUDO_USER !=# '' && $USER !=# $SUDO_USER

let g:dein#install_max_processes = 16
let g:dein#install_progress_type = 'echo'
let g:dein#enable_notification = 0
let g:dein#install_log_filename = $VARPATH.'/dein.log'
let hook_immediate = []
let plugs = []

" Search and use environments specifically made for Neovim.
if isdirectory($VARPATH.'/venv/neovim2')
  let g:python_host_prog = $VARPATH.'/venv/neovim2/bin/python'
endif
if isdirectory($VARPATH.'/venv/neovim3')
  let g:python3_host_prog = $VARPATH.'/venv/neovim3/bin/python'
endif

if has('pythonx')
  if has('python3')
    set pyxversion=3
  elseif has('python')
    set pyxversion=2
  endif
endif

function! s:yaml_check_ruby() abort
  call system("ruby -e 'require \"json\"; require \"yaml\"'")
  return (v:shell_error == 0) ? 1 : 0
endfunction

function! s:yaml_check_yaml2json()
  try
    let result = system('yaml2json', "---\ntest: 1")
    if v:shell_error != 0
      return 0
    endif
    let result = json_decode(result)
    return result.test
  catch
  endtry
  return 0
endfunction

function! LoadYaml(filename) abort " {
  if exists('*json_decode')
    if s:yaml_check_yaml2json()
      return json_decode(system('yaml2json', readfile(a:filename)))
    elseif s:yaml_check_ruby()
      return json_decode(
            \ system("ruby -e 'require \"json\"; require \"yaml\"; ".
            \ "print JSON.generate YAML.load \$stdin.read'",
            \ readfile(a:filename)))
    else
      let js = system("python3 -c \"import yaml, json; print(json.dumps(yaml.load(open('".a:filename."', 'r'), Loader=yaml.FullLoader)))\"")
      return json_decode(js)
    endif
  else
python3 << endpython
import vim, yaml
with open(vim.eval('a:filename'), 'rb') as f:
    vim.vars['yaml_file'] = yaml.load(f, Loader=yaml.FullLoader)
endpython
    return g:yaml_file
  endif
endfunction " }

function! s:dein_load_yaml(plug) abort " {
  for plugin in a:plug
    let s:plug_name = split(plugin['repo'], "/")[-1]

    for s:event in ['add', 'source', 'always']
      let s:plug_name_event = expand('$PLUGINPATH/').s:plug_name.'.'.s:event.'.vim'
      if filereadable(s:plug_name_event)
        let plugin['hook_'.s:event] = 'source '.s:plug_name_event
      endif
    endfor
    call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
  endfor
endfunction " }

function! s:source_file(path, ...) abort "{
  let use_global = get(a:000, 0, ! has('vim_starting'))
  let abspath = resolve(expand($VIMPATH.'/config/'.a:path))
  if ! use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  let content = map(readfile(abspath),
        \ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute printf('source %s', fnameescape(tempfile))
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction " }

if has('vim_starting') " { Initialize base requirements
  call s:source_file('init.vim')
  if has('nvim')
    call s:source_file('neovim.vim')
  endif
endif " }

" Initialize dein.vim (package manager) {
let s:dein_path = expand('$VARPATH/dein')
let $PLUGINPATH = expand('$VIMPATH/config/plugins')
let s:plugins = expand('$VARPATH/plugins.yaml')

silent exec '!cat $(find '.expand('$PLUGINPATH').' -type f -iname "*.yaml") > '.s:plugins
try
  let g:plugs = LoadYaml(s:plugins)
catch /.*/
  echomsg v:exception
  echomsg 'Error loading '.s:plugins.' ...'
  echomsg 'Caught: ' v:exception
endtry

for plugin in g:plugs
  if has_key(plugin, 'hook_always')
    execute plugin['hook_always']
  endif
endfor

if dein#load_state(s:dein_path)

  call dein#begin(s:dein_path, [s:plugins])
  call dein#add('Shougo/dein.vim')

  call s:dein_load_yaml(g:plugs)

  if isdirectory(expand('$VIMPATH/dev'))
    call dein#local(expand('$VIMPATH/dev'), {'frozen': 1, 'merged': 0})
  endif
  call dein#end()
  call dein#save_state()
endif
if dein#check_install()
  if ! has('nvim')
    set nomore
  endif
  call dein#install()
endif

filetype plugin indent on
syntax enable

call dein#call_hook('source')
call dein#call_hook('post_source')
call dein#remote_plugins()
unlet g:plugs
" }

" Loading configuration modules {
call s:source_file('theme.vim')
call s:source_file('general.vim')
call s:source_file('terminal.vim')
call s:source_file('filetype.vim')
call s:source_file('mappings.vim')
set secure
" }

if s:is_sudo
  set noswapfile
  set nobackup
  set nowritebackup
  set noundofile
  if has('nvim')
    set shada="NONE"
  else
    set viminfo="NONE"
  endif
endif
