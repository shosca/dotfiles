"set background=dark
"colorscheme molokai
set colorcolumn=80
"if has("gui_running")
    "set nomousehide
"else
    "" Some terminal color fixes
    "hi NonText            ctermfg=59  ctermbg=233
    "hi SpecialKey         ctermfg=59  ctermbg=233
    "hi SpellBad           ctermfg=130 ctermbg=234
    "hi SpellCap           ctermfg=130 ctermbg=234
    "hi SpellLocal         ctermfg=131 ctermbg=234
    "hi SpellRare          ctermfg=130 ctermbg=234
    "hi MatchParen         ctermfg=white ctermbg=darkgray cterm=NONE
"endif

hi ColorColumn        ctermbg=53
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=8

" Set our fonts and stuff
set list
set listchars=eol:¬,tab:¸·,trail:·
if has("gui_running")
    if has("win32") || has("win64")
        set guifont=Luculent:h9
    else
        set guifont=Luculent\ 9
    endif
endif

" No annoying error noises
set noerrorbells
set visualbell t_vb=
if has("autocmd")
    autocmd GUIEnter * set visualbell t_vb=
endif

au BufRead,BufNewFile *.brail set filetype=html

autocmd FileType cs autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType ruby,haml,eruby,yaml,html,sass,cucumber,sh set ai sw=2 sts=2 et
autocmd FileType javascript,python set ai sw=4 sts=4 et
autocmd FileType make set noexpandtab
autocmd FileType java set expandtab

" folding for cs
au FileType cs set omnifunc=syntaxcomplete#Complete
au FileType cs set foldmethod=marker
au FileType cs set foldmarker={,}
au FileType cs set foldtext=substitute(getline(v:foldstart),'{.*','{...}',)
au FileType cs set foldlevelstart=2

au FileType java set omnifunc=syntaxcomplete#Complete
au FileType java set foldmethod=marker
au FileType java set foldmarker={,}
au FileType java set foldtext=substitute(getline(v:foldstart),'{.*','{...}',)
au FileType java set foldlevelstart=2

" In normal mode, jj escapes
inoremap jj <Esc>

" edit the vimrc file
nmap <silent> <Leader>ev :e $MYVIMRC<CR>
nmap <silent> <Leader>sv :so $MYVIMRC<CR>

nmap <C-o> :CtrlPBuffer<CR>

nmap <leader>l :set list!<CR>

" split/buffer movement
noremap <silent> <C-j> <C-W>w<CR>
noremap <silent> <C-k> <C-W>W<CR>
noremap <silent> <C-u> :resize +5<CR>
noremap <silent> <C-i> :resize -5<CR>
noremap <silent> <C-h> :vertical resize +5<CR>
noremap <silent> <C-l> :vertical resize -5<CR>
noremap <silent> <C-a><C-j> :bn<CR>
noremap <silent> <C-a><C-k> :bp<CR>
noremap <silent> <C-a><C-d> :bd<CR>

map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vi :VimuxInspectRunner<CR>
map <Leader>vq :VimuxCloseRunner<CR>
map <Leader>vx :VimuxInterruptRunner<CR>

let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
"let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
"let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
    \ 'fallback': 'find %s -type f'
\ }

set nospell

let g:solarized_visibility='low'
let g:solarized_termtrans=0
