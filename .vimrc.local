"set background=dark
colorscheme Tomorrow-Night
set colorcolumn=80
"if has("gui_running")
    "set nomousehide
"else
    "" Some terminal color fixes
    "hi NonText            ctermfg=59  ctermbg=233
    "hi SpecialKey         ctermfg=59  ctermbg=233
    "hi SpellBad           ctermfg=130 ctermbg=234
    "hi SpellCap           ctermfg=130 ctermbg=234
    "hi SpellLocal         ctermfg=131 ctermbg=234
    "hi SpellRare          ctermfg=130 ctermbg=234
    "hi MatchParen         ctermfg=white ctermbg=darkgray cterm=NONE
"endif

"hi ColorColumn        ctermbg=53
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=8

" Set our fonts and stuff
set list
set listchars=eol:¬,tab:¸·,trail:·
if has("gui_running")
    if has("win32") || has("win64")
        set guifont=Hack:h10
    else
        set guifont=Hack\ 9
    endif
endif

" No annoying error noises
set noerrorbells
set visualbell t_vb=
if has("autocmd")
    autocmd GUIEnter * set visualbell t_vb=
endif

au BufRead,BufNewFile *.brail set filetype=html

autocmd FileType cs autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType ruby,haml,eruby,yaml,html,sass,cucumber,sh set ai sw=2 sts=2 et
autocmd FileType javascript,python set ai sw=4 sts=4 et
autocmd FileType make set noexpandtab
autocmd FileType java set expandtab

" folding for cs
au FileType cs set omnifunc=syntaxcomplete#Complete
au FileType cs set foldmethod=marker
au FileType cs set foldmarker={,}
au FileType cs set foldtext=substitute(getline(v:foldstart),'{.*','{...}',)
au FileType cs set foldlevelstart=2

au FileType java set omnifunc=syntaxcomplete#Complete
au FileType java set foldmethod=marker
au FileType java set foldmarker={,}
au FileType java set foldtext=substitute(getline(v:foldstart),'{.*','{...}',)
au FileType java set foldlevelstart=2

" In normal mode, jj escapes
inoremap jj <Esc>

" edit the vimrc file
nmap <silent> <Leader>ev :e $MYVIMRC<CR>
nmap <silent> <Leader>sv :so $MYVIMRC<CR>

nmap <C-o> :CtrlPBuffer<CR>

nmap <leader>l :set list!<CR>

" split management
nnoremap sj <C-W>w<CR>
nnoremap sk <C-W>W<CR>
nnoremap su :resize +5<CR>
nnoremap si :resize -5<CR>
nnoremap sh :vertical resize +5<CR>
nnoremap sl :vertical resize -5<CR>
nnoremap sd :hide<CR>
nnoremap so :only<CR>
nnoremap ss :split<Space>
nnoremap sv :vsplit<Space>

" buffer management
nnoremap th :bfirst<CR>
nnoremap tj :bnext<CR>
nnoremap tk :bprev<CR>
nnoremap tl :blast<CR>
nnoremap td :bdelete<CR>

" tab management
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tt :tabedit<Space>
nnoremap tn :tabnext<Space>
nnoremap tm :tabm<Space>
nnoremap td :tabclose<CR>


let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
"let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
"let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': 'ag %s -l --nocolor -g ""'
    \ }
else
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': 'find %s -type f'
    \ }
endif

set nospell

map <C-c><C-c> :SlimuxREPLSendLine<CR>
vmap <C-c><C-c> :SlimuxREPLSendSelection<CR>
map <Leader>s :SlimuxREPLSendLine<CR>
vmap <Leader>s :SlimuxREPLSendSelection<CR>
map <Leader>sa :SlimuxShellLast<CR>
map <Leader>sk :SlimuxSendKeysLast<CR>

nnoremap <leader>p oimport ipdb;ipdb.set_trace()
