" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }

" Environment {

    " Identify platform {
        silent function! OSX()
            return has('macunix')
        endfunction
        silent function! LINUX()
            return has('unix') && !has('macunix') && !has('win32unix')
        endfunction
        silent function! WINDOWS()
            return  (has('win32') || has('win64'))
        endfunction
    " }

    " Basics {

        set nocompatible
        filetype plugin indent on   " Automatically detect file types.

    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if WINDOWS()
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
        endif
    " }

    " Arrow Key Fix {
    if &term[:4] == "xterm" || &term[:5] == 'screen' || &term[:3] == 'rxvt'
        inoremap <silent> <C-[>OC <RIGHT>
    endif
    " }

" }

"Load Dein {

let $CACHE = expand('~/.cache')
let $TAGS = expand('$CACHE/vim/tags')

if !isdirectory(expand($CACHE))
  call mkdir(expand($CACHE), 'p')
endif

let s:dein_dir = finddir('dein.vim', '.;')
if s:dein_dir != '' || &runtimepath !~ '/dein.vim'
    if s:dein_dir == '' && &runtimepath !~ '/dein.vim'
        let s:dein_dir = expand('$CACHE/dein')
            \. '/repos/github.com/Shougo/dein.vim'
        if !isdirectory(s:dein_dir)
             execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
        endif
    endif

    execute ' set runtimepath^=' . substitute(
     \ fnamemodify(s:dein_dir, ':p') , '/$', '', '')
endif
let s:dein_dir = expand('$CACHE/dein')

call dein#begin(expand(s:dein_dir))
call dein#add('Shougo/vimproc.vim', {'build' : 'make'})

call dein#add(expand(s:dein_dir))

" }

" Plugins {

    " Themes {

    call dein#add('chriskempson/base16-vim')
    call dein#add('vim-airline/vim-airline')
    call dein#add('vim-airline/vim-airline-themes') "{
        let g:airline#extensions#tabline#enabled = 1
        let g:airline_powerline_fonts=1
        let g:airline_theme='base16_default'
        " }
    " }
"
    " Writing {

    call dein#add('reedes/vim-litecorrect')
    call dein#add('kana/vim-textobj-user')
    call dein#add('reedes/vim-textobj-sentence')
    call dein#add('reedes/vim-textobj-quote') " {
        augroup textobj_sentence
          autocmd!
          autocmd FileType markdown call textobj#sentence#init()
          autocmd FileType textile call textobj#sentence#init()
          autocmd FileType text call textobj#sentence#init()
        augroup END

        augroup textobj_quote
            autocmd!
            autocmd FileType markdown call textobj#quote#init()
            autocmd FileType textile call textobj#quote#init()
            autocmd FileType text call textobj#quote#init({'educate': 0})
        augroup END
        " }
    call dein#add('reedes/vim-wordy')
    " }

    " Snippets & AutoComplete {

        call dein#add('garbas/vim-snipmate') "{
            " Setting the author var
            let g:snips_author = 'Serkan Hosca <serkan@hosca.com>'
        " }
        call dein#add('MarcWeber/vim-addon-mw-utils')
        call dein#add('tomtom/tlib_vim')
        call dein#add('Shougo/Deoplete.nvim') " {
            let g:deoplete#enable_at_startup = 1
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
            autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
            au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
            " Automatically open and close the popup menu / preview window
            set completeopt=menu,preview,longest
            " deoplete tab-complete
            imap <silent><expr> <TAB> 
                        \ pumvisible() ? "\<C-n>" : 
                        \ <SID>check_back_space() ? "\<TAB>" : 
                        \ deoplete#mappings#manual_complete()
            function! s:check_back_space() abort "{{{
                let col = col('.') - 1
                return !col || getline('.')[col-1] =~ '\s'
            endfunction "}}}
        " } 
        call dein#add('honza/vim-snippets')
        call dein#add('wellle/tmux-complete.vim')

    " }

    " General {

    call dein#add('Shougo/unite.vim', {
                \ 'hook_add': join([
                \   'function! s:unite_settings() "{',
                \       'nmap <buffer> <ESC> <Plug>(unite_exit)',
                \       'imap <buffer> <C-j>   <Plug>(unite_select_next_line)',
                \       'imap <buffer> <C-k>   <Plug>(unite_select_previous_line)',
                \       'nmap <buffer> <C-j> j',
                \       'nmap <buffer> <C-k> k',
                \       'imap <buffer><expr> <C-s> unite#do_action("split")',
                \       'imap <buffer><expr> <C-v> unite#do_action("vsplit")',
                \       'imap <buffer><expr> <C-t> unite#do_action("tabopen")',
                \   'endfunction',
                \   '',
                \   'autocmd FileType unite call s:unite_settings()',
                \   '',
                \   'nnoremap <silent> <C-p> :Unite -start-insert file_rec/async<CR>',
                \   'nnoremap <silent> <C-o> :Unite buffer<CR>',
                \   'nnoremap <silent> <C-k> :Unite change jump<CR>',
                \   'nnoremap <silent> <C-f> :Unite grep -no-empty -no-quit -resume<CR>',
                \   'nnoremap <silent> <C-y> :Unite -default-action=append register history/yank<CR>',
                \   'nnoremap <silent> <C-l> :Unite -start-insert command history/command<CR>',
                \ ], "\n")
                \ })
        call dein#add('k0kubun/unite-git-files')
        call dein#add('Shougo/neoyank.vim')
        call dein#add('Shougo/unite-build')
        call dein#add('tsukkee/unite-tag')
        call dein#add('thinca/vim-unite-history')
        call dein#add('Shougo/neomru.vim')
        call dein#add('Shougo/vimfiler.vim')
        call dein#add('tpope/vim-markdown')
        call dein#add('epeli/slimux', {
                    \ 'hook_add': join([
                    \   'map <C-c><C-c> :SlimuxREPLSendLine<CR>',
                    \   'vmap <C-c><C-c> :SlimuxREPLSendSelection<CR>',
                    \   'map <Leader>s :SlimuxREPLSendLine<CR>',
                    \   'vmap <Leader>s :SlimuxREPLSendSelection<CR>',
                    \   'map <Leader>sa :SlimuxShellLast<CR>',
                    \   'map <Leader>sk :SlimuxSendKeysLast<CR>',
                    \ ], "\n")
                    \ })
        call dein#add('Konfekt/FastFold')
        call dein#add('tpope/vim-markdown')
        call dein#add('easymotion/vim-easymotion')
        call dein#add('vim-scripts/sessionman.vim', {
                    \ 'hook_add': join([
                    \   'nmap <leader>sl :SessionList<CR>',
                    \   'nmap <leader>ss :SessionSave<CR>',
                    \   'nmap <leader>sc :SessionClose<CR>',
                    \ ], "\n")
                    \ })
        call dein#add('Shougo/neoinclude.vim')
        call dein#add('Shougo/context_filetype.vim')

    " }

    " Programming {

        " General {

             call dein#add('neomake/neomake') "{
                let g:neomake_warning_sign = {
                  \ 'text': '∆',
                  \ 'texthl': 'WarningMsg',
                  \ }
                let g:neomake_error_sign = {
                  \ 'text': '✗',
                  \ 'texthl': 'ErrorMsg',
                  \ }
                let g:neomake_style_error_symbol = '✠'
                let g:neomake_style_warning_symbol = '≈'

                autocmd! BufReadPost,BufWritePost * Neomake
                let g:neomake_serialize = 1
                let g:neomake_serialize_abort_on_error = 1
                let g:neomake_open_list = 2
            " }
            call dein#add('airblade/vim-gitgutter') " {
                let g:gitgutter_enabled = 1
                let g:gitgutter_eager = 0
                let g:gitgutter_map_keys = 0
            " }
            call dein#add('scrooloose/nerdcommenter')
            call dein#add('godlygeek/tabular', {
                        \ 'hook_add': join([
                        \   'nmap <Leader>a& :Tabularize /&<CR>',
                        \   'vmap <Leader>a& :Tabularize /&<CR>',
                        \   'nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>',
                        \   'vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>',
                        \   'nmap <Leader>a=> :Tabularize /=><CR>',
                        \   'vmap <Leader>a=> :Tabularize /=><CR>',
                        \   'nmap <Leader>a: :Tabularize /:<CR>',
                        \   'vmap <Leader>a: :Tabularize /:<CR>',
                        \   'nmap <Leader>a:: :Tabularize /:\zs<CR>',
                        \   'vmap <Leader>a:: :Tabularize /:\zs<CR>',
                        \   'nmap <Leader>a, :Tabularize /,<CR>',
                        \   'vmap <Leader>a, :Tabularize /,<CR>',
                        \   'nmap <Leader>a,, :Tabularize /,\zs<CR>',
                        \   'vmap <Leader>a,, :Tabularize /,\zs<CR>',
                        \   'nmap <Leader>a<Bar> :Tabularize /<Bar><CR>',
                        \   'vmap <Leader>a<Bar> :Tabularize /<Bar><CR>',
                        \ ], "\n")
                        \ })
            call dein#add('luochen1990/rainbow') " {
                let g:rainbow_active=1
                let g:rainbow_load_separately = [
                    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']]  ],
                    \ [ '*.tex' , [['(', ')'], ['\[', '\]']]  ],
                    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']]  ],
                    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']]  ],
                \ ]
                let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
                let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']
            " }
            call dein#add('majutsushi/tagbar', {
                        \ 'hook_add': 'nnoremap <leader>tt :TagbarToggle<CR>'
                        \ })
            call dein#add('matchit.zip')
            call dein#add('ludovicchabant/vim-gutentags', {
                        \ 'hook_source': 'let g:gutentags_cache_dir = expand("$CACHE/vim/ptags/")'
                        \ })
            call dein#add('tpope/vim-surround')
            call dein#add('jiangmiao/auto-pairs')
            call dein#add('Chiel92/vim-autoformat')

        " }

        " SQL {

         call dein#add('vim-scripts/dbext.vim')

        " }

        " Python {

            call dein#add('davidhalter/jedi-vim', {
                        \ 'on_ft': 'python',
                        \ 'hook_source': join([
                        \   'let g:jedi#use_splits_not_buffers = "bottom"',
                        \   'let g:jedi#popup_on_dot = 0',
                        \   'let g:jedi#popup_select_first = 0',
                        \   'let g:jedi#completions_enabled = 0',
                        \   'let g:jedi#auto_vim_configuration = 0',
                        \   'let g:jedi#goto_command = "<leader>d"',
                        \   'let g:jedi#goto_assignments_command = "<leader>g"',
                        \   'let g:jedi#goto_definitions_command = ""',
                        \   'let g:jedi#documentation_command = "K"',
                        \   'let g:jedi#usages_command = "<leader>n"',
                        \   'let g:jedi#completions_command = "<C-Space>"',
                        \   'let g:jedi#rename_command = "<leader>r"',
                        \ ], " \n ")
                        \ })
            call dein#add('zchee/deoplete-jedi', {'on_ft': 'python'})
            call dein#add('tmhedberg/SimpylFold', {
                        \ 'on_ft': 'python',
                        \ 'hook_source': join([
                        \   'autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr',
                        \   'autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<',
                        \ ], " \n ")
                        \ })

            call dein#add('hynek/vim-python-pep8-indent', {'on_ft': 'python'})
            call dein#add('hdima/python-syntax', {
                        \ 'on_ft': 'python',
                        \ 'hook_source': 'let python_highlight_all = 1'
                        \ })

        " }

        " Ruby {

            call dein#add('fishbullet/deoplete-ruby', {'on_ft': 'ruby'})
            call dein#add('tpope/vim-rails', {'on_ft': 'ruby'})

        " }

        " Javascript {

            call dein#add('elzr/vim-json', {
                        \ 'on_ft': 'json',
                        \ 'hook_source': 'let g:vim_json_syntax_conceal = 0'
                        \ })
            call dein#add('groenewege/vim-less')
            call dein#add('pangloss/vim-javascript', {'on_ft': 'javascript'})
            call dein#add('briancollins/vim-jst')
            call dein#add('kchmck/vim-coffee-script', {'on_ft': 'coffee'})
            call dein#add('mxw/vim-jsx')
            call dein#add('carlitux/deoplete-ternjs', {'on_ft': 'javascript'})

        " }

        " HTML {

            call dein#add('amirh/HTML-AutoCloseTag', {
                        \ 'hook_source': join([
                        \   'au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim',
                        \   'nmap <Leader>ac <Plug>ToggleAutoCloseMappings',
                        \ ], "\n")
                        \ })
            " {
                " Make it so AutoCloseTag works for xml and xhtml files as well
            " }
            call dein#add('hail2u/vim-css3-syntax')
            call dein#add('tpope/vim-haml')
            call dein#add('mattn/emmet-vim')

        " }

        " Puppet {

            call dein#add('rodjek/vim-puppet')

        " }

        " Rust {

            call dein#add('racer-rust/vim-racer')

        " }

        " Go Lang {

            call dein#add('zchee/deoplete-go', {'on_ft': 'go'})
            call dein#add('fatih/vim-go', {
                        \ 'on_ft': 'go',
                        \ 'hook_source': join([
                        \   'let g:go_highlight_functions = 1',
                        \   'let g:go_highlight_methods = 1',
                        \   'let g:go_highlight_structs = 1',
                        \   'let g:go_highlight_operators = 1',
                        \   'let g:go_highlight_build_constraints = 1',
                        \   'let g:go_fmt_command = "goimports"',
                        \ ], " \n "),
                        \ 'hook_add': join([
                        \   'au FileType go nmap <Leader>s <Plug>(go-implements)',
                        \   'au FileType go nmap <Leader>i <Plug>(go-info)',
                        \   'au FileType go nmap <Leader>e <Plug>(go-rename)',
                        \   'au FileType go nmap <leader>r <Plug>(go-run)',
                        \   'au FileType go nmap <leader>b <Plug>(go-build)',
                        \   'au FileType go nmap <leader>t <Plug>(go-test)',
                        \   'au FileType go nmap <Leader>gd <Plug>(go-doc)',
                        \   'au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)',
                        \   'au FileType go nmap <leader>co <Plug>(go-coverage)',
                        \ ], " \n ")
                        \ })

        " }

    " }

" }

" Dein End {

call dein#end()

if dein#check_install()
    call dein#install()
endif

" }

" Colors and visuals {

    let base16colorspace=256
    set background=dark
    colorscheme base16-default-dark

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode

    " this is a performance killer
    "set cursorline                  " Highlight current line

    highlight clear SignColumn      " SignColumn should match background
    highlight clear LineNr          " Current line number row will have same background color in relative mode
    "highlight clear CursorLineNr    " Remove highlight color from current line number

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options

        if isdirectory(expand("~/.vim/bundle/vim-fugitive")) " {
        set statusline+=%{fugitive#statusline()} " Git Hotness
        endif " }

        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set number                      " Line numbers on
    "set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set wildignore=*.pyc,*.o,*.lo,*.la,*.exe,*.swp,*.db,*.bak,*.old,*.dat,*.,tmp,*.mdb,*~,~*
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
    set list
    set listchars=tab:›\ ,eol:¬,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" }

" General {

    set colorcolumn=120
    syntax on                   " Syntax highlighting
    set mouse=a                 " Automatically enable mouse usage
    "set ttymouse=sgr            " Stick to SGR 1006 mouse mode
    set mousehide               " Hide the mouse cursor while typing
    scriptencoding utf-8
    if has('clipboard')
        if has('unnamedplus')  " When possible use + register for copy-paste
            set clipboard=unnamed,unnamedplus
        else         " On mac and Windows, use * register for copy-paste
            set clipboard=unnamed
        endif
    endif
    set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    set spell                           " Spell checking on
    set hidden                          " Allow buffer switching without saving
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator

    " No annoying error noises
    set noerrorbells
    set visualbell t_vb=
    if has("autocmd")
        autocmd GUIEnter * set visualbell t_vb=
    endif

    " http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
    " Restore cursor to file position in previous editing session
    function! ResCur()
        if line("'\"") <= line("$")
            silent! normal! g`"
            return 1
        endif
    endfunction

    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END

    set backup                  " Backups are nice ...
    set backupcopy=yes
    if has('persistent_undo')
        set undofile                " So is persistent undo ...
        set undolevels=1000         " Maximum number of changes that can be undone
        set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
    endif

    if executable('ag')
        set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
        set grepformat=%f:%l:%c:%m
    endif
    let g:pymode_indent=0

    set tags=$TAGS

" }

" Formatting {

    set nowrap                      " Do not wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    "set matchpairs+=<:>             " Match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks
    hi MatchParen cterm=bold term=bold

    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,xsl,xslt,html,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
    autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2

    autocmd BufNewFile,BufRead *.coffee set filetype=coffee

    " Workaround vim-commentary for Haskell
    autocmd FileType haskell setlocal commentstring=--\ %s

    " Workaround broken colour highlighting in Haskell
    autocmd FileType haskell,rust setlocal nospell

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    autocmd FileType ruby,haml,eruby,yaml,html,sass,cucumber,sh set ai sw=2 sts=2 et
    autocmd FileType javascript,python set ai sw=4 sts=4 et
    autocmd FileType make set noexpandtab
    autocmd FileType json,jsonp set foldmethod=syntax
    augroup vagrant
        au!
        au BufRead,BufNewFile Vagrantfile set filetype=ruby
    augroup END

    autocmd BufWritePre,BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}

    autocmd FileType json nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    autocmd FileType xml,xsl,xslt nmap <leader>jt <Esc>:silent %!xmllint --format --recover - 2>/dev/null<CR>
    autocmd FileType python nnoremap <leader>jt <Esc>:silent %!yapf<Cr>

" }

" GUI Settings {

    " GVIM- (here instead of .gvimrc)
    if has('gui_running')
        set guioptions-=T           " Remove the toolbar
        set lines=40                " 40 lines of text instead of 24
        if LINUX() && has("gui_running")
            set guifont=Hack\ 9
        elseif OSX() && has("gui_running")
            set guifont=Hack\ 9
        elseif WINDOWS() && has("gui_running")
            set guifont=Hack:h10
        endif
    else
        if &term == 'xterm' || &term == 'screen'
            set t_Co=256            " Enable 256 colors to stop the CSApprox warning and make xterm vim shine
        endif
        "set term=builtin_ansi       " Make arrow and other keys work
    endif

" }

" Functions {

    function! InitializeDirectories() " {
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        for [dirname, settingname] in items(dir_list)
            let s:dir = expand('$CACHE/vim/' . dirname)
            if !isdirectory(s:dir)
                call mkdir(s:dir, 'p')
            endif
            if !isdirectory(s:dir)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . s:dir
            else
                let s:dir = substitute(s:dir, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . s:dir
            endif
        endfor
    endfunction
    call InitializeDirectories()
    " }

    function! StripTrailingWhitespace() " {
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " do the business:
        %s/\s\+$//e
        " clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction
    " }

" }

" Other plugin settings {

    " unite {
        let g:unite_source_history_yank_enable = 1
        let g:unite_source_history_yank_linut = 10000
        let g:unite_source_history_yank_file = '~/.vim/yank_history.txt'
        let g:unite_marked_icon = '✓'

        if executable('ag')
            let g:unite_source_rec_aync_command = [ 'ag', '-l', '-g', '', '--nocolor'  ]
            let g:unite_source_grep_command = 'ag'
            let g:unite_source_grep_default_opts =
                \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
                \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
            let g:unite_source_grep_recursive_opt = ''
        endif
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_reverse'])
        call unite#custom#source('file_mru,file_rec,file_rec/async,grep,locate',
          \ 'ignore_pattern', join(['\.git/', 'tmp/', 'bundle/'], '\|'))
    " }

    " vim-textobj {
        augroup textobj_sentence
          autocmd!
          autocmd FileType markdown call textobj#sentence#init()
          autocmd FileType textile call textobj#sentence#init()
          autocmd FileType text call textobj#sentence#init()
        augroup END

        augroup textobj_quote
            autocmd!
            autocmd FileType markdown call textobj#quote#init()
            autocmd FileType textile call textobj#quote#init()
            autocmd FileType text call textobj#quote#init({'educate': 0})
        augroup END
    " }

    " vimfiler {
        let g:vimfiler_as_default_explorer = 1
        let g:vimfiler_safe_mode_by_default = 0
        let g:vimfiler_tree_leaf_icon = " "
        let g:vimfiler_tree_opened_icon = '▾'
        let g:vimfiler_tree_closed_icon = '▸'
        let g:vimfiler_file_icon = '-'
        let g:vimfiler_marked_file_icon = '✓'
        let g:vimfiler_readonly_file_icon = '✗'
        let g:vimfiler_time_format = '%m-%d-%y %H:%M:%S'
        let g:vimfiler_expand_jump_to_first_child = 0
    " }

    " vimfiler {
        set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
    " }
" }

" Key Mappings {
    " The default leader is '\', but many people prefer ',' as it's in a standard
    " location.
    let mapleader = " "

    " In normal mode, jj escapes
    inoremap jj <Esc>

    " Disable Ex mode
    :map Q <Nop>


    " Wrapped lines goes down/up to next row, rather than next line in file.
    noremap j gj
    noremap k gk

    " split management
    nnoremap sj <C-W>w<CR>
    nnoremap sk <C-W>W<CR>
    nnoremap su :resize +5<CR>
    nnoremap si :resize -5<CR>
    nnoremap sh :vertical resize +5<CR>
    nnoremap sl :vertical resize -5<CR>
    nnoremap sd :hide<CR>
    nnoremap so :<CR>
    nnoremap ss :split<Space>
    nnoremap sv :vsplit<Space>

    " tab management
    nnoremap th :tabfirst<CR>
    nnoremap tj :tabnext<CR>
    nnoremap tk :tabprev<CR>
    nnoremap tl :tablast<CR>
    nnoremap tt :tabedit<Space>
    nnoremap tn :tabnext<CR>
    nnoremap tm :tabm<Space>
    nnoremap td :tabclose<CR>

    " navigate errors
    nmap ej :lnext<CR>
    nmap ek :lprevious<CR>

    " End/Start of line motion keys act relative to row/wrap width in the
    " presence of `:set wrap`, and relative to line for `:set nowrap`.
    " Default vim behaviour is to act relative to text line in both cases

    function! WrapRelativeMotion(key, ...)
        let vis_sel=""
        if a:0
            let vis_sel="gv"
        endif
        if &wrap
            execute "normal!" vis_sel . "g" . a:key
        else
            execute "normal!" vis_sel . a:key
        endif
    endfunction

    " Map g* keys in Normal, Operator-pending, and Visual+select
    noremap $ :call WrapRelativeMotion("$")<CR>
    noremap <End> :call WrapRelativeMotion("$")<CR>
    noremap 0 :call WrapRelativeMotion("0")<CR>
    noremap <Home> :call WrapRelativeMotion("0")<CR>
    noremap ^ :call WrapRelativeMotion("^")<CR>
    " Overwrite the operator pending $/<End> mappings from above
    " to force inclusive motion with :execute normal!
    onoremap $ v:call WrapRelativeMotion("$")<CR>
    onoremap <End> v:call WrapRelativeMotion("$")<CR>
    " Overwrite the Visual+select mode mappings from above
    " to ensure the correct vis_sel flag is passed to function
    vnoremap $ :<C-U>call WrapRelativeMotion("$", 1)<CR>
    vnoremap <End> :<C-U>call WrapRelativeMotion("$", 1)<CR>
    vnoremap 0 :<C-U>call WrapRelativeMotion("0", 1)<CR>
    vnoremap <Home> :<C-U>call WrapRelativeMotion("0", 1)<CR>
    vnoremap ^ :<C-U>call WrapRelativeMotion("^", 1)<CR>

    " Stupid shift key fixes
    if has("user_commands")
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>
    endif

    cmap Tabe tabe

    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    " Code folding options
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>

    " Most prefer to toggle search highlighting rather than clear the current
    " search results. To clear search highlighting rather than toggle it on
    nmap <silent> <leader>/ :set invhlsearch<CR>
    " nmap <silent> <leader>/ :nohlsearch<CR>

    " Shortcuts
    " Change Working Directory to that of the current file
    cmap cwd lcd %:p:h
    cmap cd. lcd %:p:h

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " For when you forget to sudo.. Really Write the file.
    cmap w!! w !sudo tee % >/dev/null

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " Adjust viewports to the same size
    map <Leader>= <C-w>=

    " Map <Leader>ff to display all lines with keyword under cursor
    " and ask which one to jump to
    nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

    " Easier horizontal scrolling
    map zl zL
    map zh zH

    " Easier formatting
    nnoremap <silent> <leader>q gwip

    au FileType python nnoremap <leader>p oimport ipdb;ipdb.set_trace()  # flake8: noqa<Esc>

    " edit the vimrc file
    nmap <silent> <Leader>ev :e $MYVIMRC<CR>
    nmap <silent> <Leader>sv :so $MYVIMRC<CR>

    "inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
    inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
    inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
    inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
    inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

" }

" Plugin Key Mappings {

    " Completion {
    " }

    " VimFiler {
        nnoremap <silent> <Leader>e :<C-u>VimFiler -parent -toggle<CR>
    " }

" }
