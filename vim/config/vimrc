" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
" }

" Runtime {

    " Basics {
    set nocompatible
    filetype plugin indent on   " Automatically detect file types.
    " }

    " Set MyAutoCmd {
    augroup MyAutoCmd
        autocmd!
        autocmd CursorHold *? syntax sync minlines=300
    augroup END
    " }

    " Write history on idle {
    augroup idle_history
      au!
      autocmd CursorHold * if exists(':rshada') | rshada | wshada | endif
    augroup END
    " }

    let g:python_host_prog = '/usr/bin/python2'
    let g:python3_host_prog = '/usr/bin/python3'

    let $VIMPATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
    let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim')
    let $PLUGINPATH = expand('$VIMPATH/config/plugins')

    if !isdirectory(expand($VARPATH))
      call mkdir(expand($VARPATH), 'p')
    endif

    " The default leader is '\', but many people prefer ',' as it's in a standard
    " location.
    let mapleader = "\<Space>"
    let maplocalleader = ","
    let g:unite_leader = "f"

    " Identify platform {
    silent function! OSX()
        return has('macunix')
    endfunction
    silent function! LINUX()
        return has('unix') && !has('macunix') && !has('win32unix')
    endfunction
    silent function! WINDOWS()
        return  (has('win32') || has('win64'))
    endfunction
    " }

    " Windows Compatible {
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier.
    if WINDOWS()
      set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
    endif
    " }

    " Arrow Key Fix {
    if &term[:4] == "xterm" || &term[:5] == 'screen' || &term[:3] == 'rxvt'
        inoremap <silent> <C-[>OC <RIGHT>
    endif
    " }

" }

" Functions {

    function! InitializeDirectories() " {
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        for [dirname, settingname] in items(dir_list)
            let s:dir = expand('$VARPATH/vim/' . dirname)
            if !isdirectory(s:dir)
                call mkdir(s:dir, 'p')
            endif
            if !isdirectory(s:dir)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . s:dir
            else
                let s:dir = substitute(s:dir, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . s:dir
            endif
        endfor
    endfunction
    call InitializeDirectories()
    " }

    function! StripTrailingWhitespace() " {
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " do the business:
        %s/\s\+$//e
        " clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction
    " }

    function! s:source_file(path, ...) abort "{
        let use_global = get(a:000, 0, ! has('vim_starting'))
        let abspath = resolve(expand($VIMPATH.'/config/'.a:path))
        if ! use_global
            execute 'source' fnameescape(abspath)
            return
        endif

        let content = map(readfile(abspath),
            \ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
        let tempfile = tempname()
        try
            call writefile(content, tempfile)
            execute printf('source %s', fnameescape(tempfile))
        finally
            if filereadable(tempfile)
                call delete(tempfile)
            endif
        endtry

    endfunction

    " }

    function! s:dein_load_yaml(filename) abort " {
python << endpython
import vim, yaml
with open(vim.eval('a:filename'), 'r') as f:
    vim.vars['plugins'] = yaml.load(f.read())
endpython
        let a:events = ['add', 'source', 'always']
        for plugin in g:plugins
            let s:plug_name = split(plugin['repo'], "/")[-1]

            for s:event in a:events
                let s:plug_name_event = expand('$PLUGINPATH/').s:plug_name.'.'.s:event.'.vim'
                if filereadable(s:plug_name_event)
                    let plugin['hook_'.s:event] = 'source '.s:plug_name_event
                endif
            endfor
            call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
            if has_key(plugin, 'hook_always')
                execute plugin['hook_always']
            endif
        endfor
        unlet g:plugins
    endfunction " }

" }

" Dein {

let s:dein_path = expand('$VARPATH/dein')
if &runtimepath !~# '/dein.vim'
    let s:dein_dir = s:dein_path.'/repos/github.com/Shougo/dein.vim'
    if ! isdirectory(s:dein_dir)
        execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
    endif

    execute 'set runtimepath+='.substitute(fnamemodify(s:dein_dir, ':p'), '/$', '', '')
endif

if dein#load_state(s:dein_path)
    let s:autoplugs = split(globpath('$PLUGINPATH', '**/*.yaml'), "\n")

    call dein#begin(s:dein_path, s:autoplugs + [expand('<sfile>')])
    call dein#add('Shougo/dein.vim')

    for autoplug in s:autoplugs
        try
            call s:dein_load_yaml(autoplug)
        catch /.*/
            echomsg v:exception
            echomsg 'Error loading '.autoplug.' ...'
            echomsg 'Caught: ' v:exception
        endtry
    endfor

    if isdirectory(expand('$VIMPATH/dev'))
        call dein#local(expand('$VIMPATH/dev'), {'frozen': 1, 'merged': 0})
    endif
    call dein#end()
    call dein#save_state()

    if dein#check_install()
        if ! has('nvim')
            set nomore
        endif
        call dein#install()
    endif
endif
call dein#call_hook('source')
call dein#call_hook('post_source')

" }

call s:source_file('visuals.vim')
call s:source_file('general.vim')
call s:source_file('mappings.vim')
call s:source_file('autocmds.vim')

" GUI Settings {


" }

" { Local config
if filereadable(expand("~/.config/nvim/init.local.vim"))
    source ~/.config/nvim/init.local.vim
endif
" }
