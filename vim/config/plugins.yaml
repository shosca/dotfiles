- repo: Shougo/dein.vim

- repo: Shougo/denite.nvim
  hook_source: source $VIMPATH/config/plugins/denite.pre.vim
  hook_add: source $VIMPATH/config/plugins/denite.post.vim

- repo: hecal3/vim-leader-guide
  loadconf: 1
  loadconf_before: 1
  merged' : 0

- repo: idanarye/vim-vebugger

- repo: tpope/vim-fugitive
- repo: cohama/agit.vim
  on_cmd: [Agit, AgitFile]

- repo: gregsexton/gitv
  on_cmd: Gitv

- repo: lambdalisue/vim-gita
  on_cmd: Gita
  hook_always: |
    nnoremap <silent> <leader>gs :<C-u>Gita status<CR>
    nnoremap <silent> <leader>gc :<C-u>Gita commit<CR>
    nnoremap <silent> <leader>ga :<C-u>Gita commit --amend<CR>
    nnoremap <silent> <leader>gd :<C-u>Gita diff<CR>
    nnoremap <silent> <leader>gb :<C-u>Gita browse<CR>
    nnoremap <silent> <leader>gl :<C-u>Gita blame<CR>
    nnoremap <silent> <leader>gp :<C-u>Gita push<CR>

- repo: junegunn/gv.vim
  on_cmd: [GV]

- repo: sbdchd/neoformat
  on_cmd: Neoformat

- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_source: let g:committia_min_window_width = 70

- repo: airblade/vim-gitgutter
  hook_source: |
    let g:gitgutter_enabled = 1
    let g:gitgutter_eager = 0
    let g:gitgutter_map_keys = 0

- repo: Shougo/vimproc.vim
  build: make
  on_func: vimproc#

- repo: morhetz/gruvbox

- repo: chriskempson/base16-vim

- repo: vim-airline/vim-airline

- repo: vim-airline/vim-airline-themes
  hook_source: |
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_powerline_fonts=1
    let g:airline_theme='base16_default'

- repo: kana/vim-textobj-user
  on_func: textobj#user#

- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_source: |
    let g:vim_markdown_initial_foldlevel = 5
    let g:vim_markdown_new_list_item_indent = 2
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_conceal = 0

- repo: majutsushi/tagbar
  hook_add: |
    nnoremap <leader>tt :TagbarToggle<CR>

- repo: benekastah/neomake
  if: has('nvim')
  on_cmd: Neomake
  hook_source: |
    let g:neomake_open_list = 2
    let g:neomake_verbose = 0
    let g:neomake_serialize_abort_on_error = 0
    let g:airline#extensions#neomake#enabled = 0
  hook_add: |
    autocmd! BufWritePost * Neomake

- repo: mhinz/vim-startify
  hook_add: |
    let g:startify_session_dir = $VARPATH.'/session'

- repo: reedes/vim-wordy
  on_cmd: NextWordy, PrevWordy

- repo: Shougo/neosnippet-snippets

- repo: Shougo/context_filetype.vim
  lazy: 1

- repo: Shougo/neosnippet.vim
  depends: [neosnippet-snippets, context_filetype.vim]
  on_event: InsertCharPre
  on_ft: snippet
  hook_add: |
    let g:neosnippet#snippets_directory = $VARPATH.'/snippets'
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
  hook_source: |
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_complete_done = 1
    let g:neosnippet#expand_word_boundary = 1

- repo: Shougo/deoplete.nvim
  if: has('nvim')
  depends: [context_filetype.vim]
  hook_source: |
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 60
    let g:deoplete#auto_refresh_delay = 1000
    let g:deoplete#enable_camel_case = 1
    let g:deoplete#tag#cache_limit_size = 5000000
    au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
    set completeopt=menu,preview,longest
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col-1] =~ '\s'
    endfunction
    imap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#mappings#manual_complete()

- repo: Shougo/neocomplete
  if: ! has('nvim') && has('lua')
  on_event: InsertEnter

- repo: wellle/tmux-complete.vim
  depends: [deoplete.nvim]
  on_event: InsertEnter

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_path: .*
  hook_source: |
    let g:gutentags_cache_dir = $VARPATH.'tags'
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0
    let g:gutentags_modules = ['ctags']

- repo: mattn/emmet-vim
  on_i: 1
  on_ft: [css, html, jsx, javascript, javascript.jsx]
  hook_source: |
    let g:use_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'
    autocmd FileType html,css,jsx,javascript,javascript.jsx EmmetInstall | imap <buffer> <C-Return> <Plug>(emmet-expand-abbr)

- repo: davidhalter/jedi-vim
  on_ft: python
  hook_add: |
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 1
    autocmd FileType python nnoremap <buffer> <leader>d :call jedi#goto()<CR>
    autocmd FileType python nnoremap <buffer> <leader>g :call jedi#goto_assignments()<CR>
    autocmd FileType python nnoremap <buffer> <leader>n :call jedi#usages()<CR>
    autocmd FileType python nnoremap <buffer> <leader>r :call jedi#rename()<CR>
    autocmd FileType python vnoremap <buffer> <leader>r :call jedi#rename_visual()<CR>
  hook_source: |
    let g:jedi#documentation_command = "K"
    let g:jedi#use_tag_stack = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#quickfix_window_height = 10
    let g:jedi#max_doc_height = 100

- repo: Vimjas/vim-python-pep8-indent
  on_ft: python

- repo: tmhedberg/SimpylFold
  on_ft: python

- repo: Konfekt/FastFold

- repo: zchee/deoplete-jedi
  if: has('nvim')
  depends: [deoplete.nvim]
  on_ft: python
  on_i: 1
  hook_source: |
    autocmd FileType python setlocal omnifunc=
    let g:deoplete#sources#jedi#statement_length = 1
    let g:deoplete#sources#jedi#show_docstring = 1
    let g:deoplete#sources#jedi#short_types = 1
    let g:deoplete#sources#jedi#worker_threads = 2

- repo: fishbullet/deoplete-ruby
  if: has('nvim')
  depends: [deoplete.nvim]
  on_ft: ruby

- repo: sebastianmarkow/deoplete-rust
  if: has('nvim')
  depends: [deoplete.nvim]
  on_ft: rust

- repo: carlitux/deoplete-ternjs
  build: npm install -g tern
  if: executable('npm') && has('nvim')
  on_i: 1
  on_ft: javascript
  hook_source: |
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = '0'

- repo: elzr/vim-json
  on_ft: json
  hook_source: let g:vim_json_syntax_conceal = 0

- repo: tpope/vim-rails
  on_ft: ruby

- repo: zchee/deoplete-go
  if: has('nvim')
  depends: [deoplete.nvim]
  on_ft: go
  on_i: 1

- repo: fatih/vim-go
  on_ft: go
  hook_source: |
    let g:go_def_mapping_enabled = 0
    let g:go_fmt_command = "goimports"
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_snippet_engine = 'neosnippet'

- repo: vim-scripts/dbext.vim
  on_ft: sql

- repo: vim-scripts/SQLUtilities
  on_ft: sql

- repo: vim-scripts/Align
  on_ft: sql

- repo: Shougo/vimfiler.vim
  hook_add: |
    nnoremap <silent> <Leader>e :<C-u>VimFiler -parent -toggle<CR>
  hook_source: |
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_file_icon = '-'
    let g:vimfiler_marked_file_icon = '✓'
    let g:vimfiler_readonly_file_icon = '✗'
    let g:vimfiler_restore_alternate_file = 1
    let g:vimfiler_safe_mode_by_default = 0
    let g:vimfiler_time_format = '%m-%d-%y %H:%M:%S'
    let g:vimfiler_tree_closed_icon = '▸'
    let g:vimfiler_tree_indentation = 1
    let g:vimfiler_tree_leaf_icon = ''
    let g:vimfiler_tree_opened_icon = '▾'
    let g:vimfiler_ignore_pattern = [
            \ '^\.git$',
            \ '^\.DS_Store$',
            \ '^\.init\.vim-rplugin\~$',
            \ '^\.netrwhist$',
            \ '\.class$'
            \]

- repo: Shougo/neco-vim
  on_ft: vim

- repo: Shougo/neco-syntax
  on_source: [ neocomplete.vim, deoplete.nvim ]

- repo: pangloss/vim-javascript
  on_ft: javascript

- repo: tpope/vim-commentary
  on_map: <Plug>Commentary
  hook_always: |
    xmap <Leader>v  <Plug>Commentary
    nmap <Leader>v  <Plug>CommentaryLine
    xmap gc  <Plug>Commentary
    nmap gc  <Plug>Commentary
    omap gc  <Plug>Commentary
    nmap gcc <Plug>CommentaryLine
    nmap cgc <Plug>ChangeCommentary
    nmap gcu <Plug>Commentary<Plug>Commentary
